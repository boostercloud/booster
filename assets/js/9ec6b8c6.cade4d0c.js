"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8708],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,y=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(y,i(i({ref:t},d),{},{components:n})):r.createElement(y,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6970:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={description:"Learn how to update entities and ReadModels"},i="TouchEntities",s={unversionedId:"going-deeper/touch-entities",id:"going-deeper/touch-entities",title:"TouchEntities",description:"Learn how to update entities and ReadModels",source:"@site/docs/10_going-deeper/touch-entities.mdx",sourceDirName:"10_going-deeper",slug:"/going-deeper/touch-entities",permalink:"/going-deeper/touch-entities",draft:!1,editUrl:"https://github.com/boostercloud/booster/tree/main/website/docs/10_going-deeper/touch-entities.mdx",tags:[],version:"current",lastUpdatedBy:"Javier Toledo",lastUpdatedAt:1695984635,formattedLastUpdatedAt:"Sep 29, 2023",frontMatter:{description:"Learn how to update entities and ReadModels"},sidebar:"docs",previous:{title:"Migrations",permalink:"/going-deeper/data-migrations"},next:{title:"Customizing CLI resource templates",permalink:"/going-deeper/custom-templates"}},c={},l=[],d={toc:l};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"touchentities"},"TouchEntities"),(0,o.kt)("p",null,"Booster provides a way to refresh the value of an entity and update the corresponding ReadModels that depend on it.\nThis functionality is useful when a new projection is added to a ReadModel and you want to apply it retroactively to the events that have already occurred.\nIt is also helpful when there was an error when calculating a ReadModel or when the snapshot of an entity was not generated."),(0,o.kt)("p",null,"To migrate an existing entity to a new version, you need to call ",(0,o.kt)("inlineCode",{parentName:"p"},"BoosterTouchEntityHandler.touchEntity")," to touch entities.\nFor example, this command will touch all the entities of the class Cart.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Booster, BoosterTouchEntityHandler, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { Cart } from '../entities/cart'\n\n@Command({\n  authorize: 'all',\n})\nexport class TouchCommand {\n  public constructor() {}\n\n  public static async handle(_command: TouchCommand, _register: Register): Promise<void> {\n    const entitiesIdsResult = await Booster.entitiesIDs('Cart', 500, undefined)\n    const paginatedEntityIdResults = entitiesIdsResult.items\n    const carts = await Promise.all(\n      paginatedEntityIdResults.map(async (entity) => await Booster.entity(Cart, entity.entityID))\n    )\n    if (!carts || carts.length === 0) {\n      return\n    }\n    await Promise.all(\n      carts.map(async (cart) => {\n        const validCart = cart!\n        await BoosterTouchEntityHandler.touchEntity('Cart', validCart.id)\n        console.log('Touched', validCart)\n        return validCart.id\n      })\n    )\n  }\n}\n")),(0,o.kt)("p",null,"Please note that touching entities is an advanced feature that should be used with caution and only when necessary.\nIt may affect your application performance and consistency if not used properly."))}u.isMDXComponent=!0}}]);