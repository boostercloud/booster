"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1588],{6637:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var o=r(5893),t=r(1151),s=r(5162),i=r(4866);const a={},l="File Uploads Rocket",c={id:"going-deeper/rockets/rocket-file-uploads",title:"File Uploads Rocket",description:"This package is a configurable rocket to add a storage API to your Booster applications.",source:"@site/docs/10_going-deeper/rockets/rocket-file-uploads.md",sourceDirName:"10_going-deeper/rockets",slug:"/going-deeper/rockets/rocket-file-uploads",permalink:"/going-deeper/rockets/rocket-file-uploads",draft:!1,unlisted:!1,editUrl:"https://github.com/boostercloud/booster/tree/main/website/docs/10_going-deeper/rockets/rocket-file-uploads.md",tags:[],version:"current",lastUpdatedBy:"Mario Castro Squella",lastUpdatedAt:1725973309,formattedLastUpdatedAt:"Sep 10, 2024",frontMatter:{},sidebar:"docs",previous:{title:"Extending Booster with Rockets!",permalink:"/going-deeper/rockets"},next:{title:"Backup Booster Rocket",permalink:"/going-deeper/rockets/rocket-backup-booster"}},d={},u=[{value:"Supported Providers",id:"supported-providers",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Rocket Methods Usage",id:"rocket-methods-usage",level:2},{value:"Azure Roles",id:"azure-roles",level:2},{value:"Rocket Methods Usage",id:"rocket-methods-usage-1",level:2},{value:"Rocket Methods Usage",id:"rocket-methods-usage-2",level:2},{value:"Security",id:"security",level:2},{value:"Events",id:"events",level:2},{value:"TODOs",id:"todos",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.a)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"file-uploads-rocket",children:"File Uploads Rocket"}),"\n",(0,o.jsx)(n.p,{children:"This package is a configurable rocket to add a storage API to your Booster applications."}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/boostercloud/rocket-file-uploads",children:"GitHub Repo"})})}),"\n",(0,o.jsx)(n.h2,{id:"supported-providers",children:"Supported Providers"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Azure Provider"}),"\n",(0,o.jsx)(n.li,{children:"AWS Provider"}),"\n",(0,o.jsx)(n.li,{children:"Local Provider"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"This rocket provides some methods to access files stores in your cloud provider:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"presignedPut"}),": Returns a presigned put url and the necessary form params. With this url files can be uploaded directly to your provider."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"presignedGet"}),":  Returns a presigned get url to download a file. With this url files can be downloaded directly from your provider."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"list"}),": Returns a list of files stored in the provider."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"deleteFile"}),": Removes a file from a directory (only supported in AWS at the moment)."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"These methods may be used from a Command in your project secured via JWT Token.\nThis rocket also provides a Booster Event each time a file is uploaded."}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(i.Z,{groupId:"providers-usage",children:[(0,o.jsxs)(s.Z,{value:"azure-provider",label:"Azure Provider",default:!0,children:[(0,o.jsx)(n.p,{children:"Install needed dependency packages:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install --save @boostercloud/rocket-file-uploads-core @boostercloud/rocket-file-uploads-types\nnpm install --save @boostercloud/rocket-file-uploads-azure\n"})}),(0,o.jsx)(n.p,{children:"Also, you will need a devDependency in your project:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @boostercloud/rocket-file-uploads-azure-infrastructure\n"})}),(0,o.jsx)(n.p,{children:"In your Booster config file, configure your BoosterRocketFiles:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/config/config.ts"',children:"import { Booster } from '@boostercloud/framework-core'\nimport { BoosterConfig } from '@boostercloud/framework-types'\nimport { BoosterRocketFiles } from '@boostercloud/rocket-file-uploads-core'\nimport { RocketFilesUserConfiguration } from '@boostercloud/rocket-file-uploads-types'\n\nconst rocketFilesConfigurationDefault: RocketFilesUserConfiguration = {\n  storageName: 'STORAGE_NAME',\n  containerName: 'CONTAINER_NAME',\n  directories: ['DIRECTORY_1', 'DIRECTORY_2'],\n}\n\nconst rocketFilesConfigurationCms: RocketFilesUserConfiguration = {\n  storageName: 'cmsst',\n  containerName: 'rocketfiles',\n  directories: ['cms1', 'cms2'],\n}\n\nBooster.configure('production', (config: BoosterConfig): void => {\n  config.appName = 'TEST_APP_NAME'\n  config.providerPackage = '@boostercloud/framework-provider-azure'\n  config.rockets = [\n    new BoosterRocketFiles(config, [rocketFilesConfigurationDefault, rocketFilesConfigurationCms]).rocketForAzure(),\n  ]\n})\n\n"})}),(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsx)(n.p,{children:"Available parameters are:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"storageName"}),": Name of the storage repository."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"containerName"}),": Directories container."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"directories"}),": A list of folders where the files will be stored."]}),"\n"]}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.p,{children:"The structure created will be:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"\u251c\u2500\u2500 storageName\n\u2502   \u251c\u2500\u2500 containerName\n\u2502   \u2502   \u251c\u2500\u2500 directory\n"})}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"NOTE:"})," Azure Provider will use ",(0,o.jsx)(n.code,{children:"storageName"})," as the Storage Account Name."]})]}),(0,o.jsx)(n.h2,{id:"rocket-methods-usage",children:"Rocket Methods Usage"}),(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:"Presigned Put"}),(0,o.jsxs)(n.p,{children:["Create a command in your application and call the ",(0,o.jsx)(n.code,{children:"presignedPut"})," method on the ",(0,o.jsx)(n.code,{children:"FileHandler"})," class with the directory and filename you want to upload on the storage."]}),(0,o.jsx)(n.p,{children:"The storageName parameter is optional. It will use the first storage if undefined."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/commands/file-upload-put.ts"',children:"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadPut {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadPut, register: Register): Promise<string> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.presignedPut(command.directory, command.fileName)\n  }\n}\n"})}),(0,o.jsx)(n.p,{children:"GraphQL Mutation:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'mutation {\n  FileUploadPut(input: {\n    storageName: "clientst",\n    directory: "client1",\n    fileName: "myfile.txt"\n    }\n  )\n}\n'})}),(0,o.jsx)(n.p,{children:"Azure Response:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "FileUploadPut": "https://clientst.blob.core.windows.net/rocketfiles/client1/myfile.txt?<SAS>"\n  }\n}\n'})})]}),(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:"Presigned Get"}),(0,o.jsxs)(n.p,{children:["Create a command in your application and call the ",(0,o.jsx)(n.code,{children:"presignedGet"})," method on the ",(0,o.jsx)(n.code,{children:"FileHandler"})," class with the directory and filename you want to get on the storage."]}),(0,o.jsx)(n.p,{children:"The storageName parameter is optional. It will use the first storage if undefined."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/commands/file-upload-get.ts"',children:"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadGet {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadGet, register: Register): Promise<string> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.presignedGet(command.directory, command.fileName)\n  }\n}\n"})}),(0,o.jsx)(n.p,{children:"GraphQL Mutation:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'mutation {\n  FileUploadGet(input: {\n    storageName: "clientst",\n    directory: "client1",\n    fileName: "myfile.txt"\n  }\n  )\n}\n'})}),(0,o.jsx)(n.p,{children:"Azure Response:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "FileUploadGet": "https://clientst.blob.core.windows.net/rocketfiles/folder01%2Fmyfile.txt?<SAS>"\n  }\n}\n'})})]}),(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:"List"}),(0,o.jsxs)(n.p,{children:["Create a command in your application and call the ",(0,o.jsx)(n.code,{children:"list"})," method on the ",(0,o.jsx)(n.code,{children:"FileHandler"})," class with the directory you want to get the info and return the formatted results."]}),(0,o.jsx)(n.p,{children:"The storageName parameter is optional. It will use the first storage if undefined."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/commands/file-upload-list.ts"',children:"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\nimport { ListItem } from '@boostercloud/rocket-file-uploads-types'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadList {\n  public constructor(readonly directory: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadList, register: Register): Promise<Array<ListItem>> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.list(command.directory)\n  }\n}\n"})}),(0,o.jsx)(n.p,{children:"GraphQL Mutation:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'mutation {\n  FileUploadList(input: {\n    storageName: "clientst",\n    directory: "client1"\n    }\n  )\n}\n'})}),(0,o.jsx)(n.p,{children:"Response:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "FileUploadList": [\n      {\n        "name": "client1/myfile.txt",\n        "properties": {\n          "createdOn": "2022-10-26T05:40:47.000Z",\n          "lastModified": "2022-10-26T05:40:47.000Z",\n          "contentLength": 6,\n          "contentType": "text/plain"\n        }\n      }\n    ]\n  }\n}\n'})})]}),(0,o.jsx)(r,{children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)("summary",{children:"Delete File"}),"\nCurrently, the option to delete a file is only available on AWS. If this is a feature you were looking for, please let us know on Discord. Alternatively, you can implement this feature and submit a pull request on GitHub for this Rocket!"]})}),(0,o.jsx)(n.h2,{id:"azure-roles",children:"Azure Roles"}),(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["Starting at version ",(0,o.jsx)(n.strong,{children:"0.31.0"})," this Rocket use Managed Identities instead of Connection Strings. Please, check that you have the required permissions to assign roles ",(0,o.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/role-based-access-control/role-assignments-portal-managed-identity#prerequisites",children:"https://learn.microsoft.com/en-us/azure/role-based-access-control/role-assignments-portal-managed-identity#prerequisites"})]})}),(0,o.jsx)(n.p,{children:"For uploading files to Azure you need the Storage Blob Data Contributor role. This can be assigned to a user using the portal or with the next scripts:"}),(0,o.jsx)(n.p,{children:"First, check if you have the correct permissions:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'ACCOUNT_NAME="<STORAGE ACCOUNT NAME>"\nCONTAINER_NAME="<CONTAINER NAME>"\n\n# use this to test if you have the correct permissions\naz storage blob exists --account-name $ACCOUNT_NAME `\n                        --container-name $CONTAINER_NAME `\n                        --name blob1.txt --auth-mode login\n'})}),(0,o.jsx)(n.p,{children:"If you don't have it, then run this script as admin:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'ACCOUNT_NAME="<STORAGE ACCOUNT NAME>"\nCONTAINER_NAME="<CONTAINER NAME>"\n\nOBJECT_ID=$(az ad user list --query "[?mailNickname==\'<YOUR MAIL NICK NAME>\'].objectId" -o tsv)\nSTORAGE_ID=$(az storage account show -n $ACCOUNT_NAME --query id -o tsv)\n\naz role assignment create \\\n    --role "Storage Blob Data Contributor" \\\n    --assignee $OBJECT_ID \\\n    --scope "$STORAGE_ID/blobServices/default/containers/$CONTAINER_NAME"\n'})})]}),(0,o.jsxs)(s.Z,{value:"aws-provider",label:"AWS Provider",default:!0,children:[(0,o.jsx)(n.p,{children:"Install needed dependency packages:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install --save @boostercloud/rocket-file-uploads-core @boostercloud/rocket-file-uploads-types\nnpm install --save @boostercloud/rocket-file-uploads-aws\n"})}),(0,o.jsx)(n.p,{children:"Also, you will need a devDependency in your project:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install --save-dev @boostercloud/rocket-file-uploads-aws-infrastructure\n"})}),(0,o.jsx)(n.p,{children:"In your Booster config file, configure your BoosterRocketFiles:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/config/config.ts"',children:"import { Booster } from '@boostercloud/framework-core'\nimport { BoosterConfig } from '@boostercloud/framework-types'\nimport { BoosterRocketFiles } from '@boostercloud/rocket-file-uploads-core'\nimport { RocketFilesUserConfiguration } from '@boostercloud/rocket-file-uploads-types'\n\nconst rocketFilesConfigurationDefault: RocketFilesUserConfiguration = {\n  storageName: 'STORAGE_NAME',\n  containerName: '', // Not used in AWS, you can just pass an empty string\n  directories: ['DIRECTORY_1', 'DIRECTORY_2'],\n}\n\nconst rocketFilesConfigurationCms: RocketFilesUserConfiguration = {\n  storageName: 'cmsst',\n  containerName: '', // Not used in AWS, you can just pass an empty string\n  directories: ['cms1', 'cms2'],\n}\n\nBooster.configure('production', (config: BoosterConfig): void => {\n  config.appName = 'TEST_APP_NAME'\n  config.providerPackage = '@boostercloud/framework-provider-aws'\n  config.rockets = [\n    new BoosterRocketFiles(config, [rocketFilesConfigurationDefault, rocketFilesConfigurationCms]).rocketForAWS(),\n  ]\n})\n"})}),(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsx)(n.p,{children:"Available parameters are:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"storageName"}),": Name of the storage repository."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"directories"}),": A list of folders where the files will be stored."]}),"\n"]}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.p,{children:"The structure created will be:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"\u251c\u2500\u2500 storageName\n\u2502   \u251c\u2500\u2500 directory\n"})})]}),(0,o.jsx)(n.h2,{id:"rocket-methods-usage-1",children:"Rocket Methods Usage"}),(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:"Presigned Put"}),(0,o.jsxs)(n.p,{children:["Create a command in your application and call the ",(0,o.jsx)(n.code,{children:"presignedPut"})," method on the ",(0,o.jsx)(n.code,{children:"FileHandler"})," class with the directory and filename you want to upload on the storage."]}),(0,o.jsx)(n.p,{children:"The storageName parameter is optional. It will use the first storage if undefined."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/commands/file-upload-put.ts"',children:"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadPut {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadPut, register: Register): Promise<PresignedPostResponse> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.presignedPut(command.directory, command.fileName) as Promise<PresignedPostResponse>\n  }\n}\n"})}),(0,o.jsx)(n.p,{children:"GraphQL Mutation:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'mutation {\n  FileUploadPut(input: { \n    directory: "files", \n    fileName: "lol.jpg"\n  }) {\n    url\n    fields\n  }\n}\n'})}),(0,o.jsx)(n.p,{children:"AWS Response:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "FileUploadPut": {\n      "url": "https://s3.eu-west-1.amazonaws.com/myappstorage",\n      "fields": {\n        "Key": "files/lol.jpg",\n        "bucket": "myappstorage",\n        "X-Amz-Algorithm": "AWS4-HMAC-SHA256",\n        "X-Amz-Credential": "blablabla.../eu-west-1/s3/aws4_request",\n        "X-Amz-Date": "20230207T142138Z",\n        "X-Amz-Security-Token": "IQoJb3JpZ2... blablabla",\n        "Policy": "eyJleHBpcmF0a... blablabla",\n        "X-Amz-Signature": "60511... blablabla"\n      }\n    }\n  }\n}\n'})})]}),(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:"Presigned Get"}),(0,o.jsxs)(n.p,{children:["Create a command in your application and call the ",(0,o.jsx)(n.code,{children:"presignedGet"})," method on the ",(0,o.jsx)(n.code,{children:"FileHandler"})," class with the directory and filename you want to get on the storage."]}),(0,o.jsx)(n.p,{children:"The storageName parameter is optional. It will use the first storage if undefined."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/commands/file-upload-get.ts"',children:"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadGet {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadGet, register: Register): Promise<string> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.presignedGet(command.directory, command.fileName)\n  }\n}\n"})}),(0,o.jsx)(n.p,{children:"GraphQL Mutation:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'mutation {\n  FileUploadGet(input: {\n    storageName: "clientst",\n    directory: "client1",\n    fileName: "myfile.txt"\n  }\n  )\n}\n'})}),(0,o.jsx)(n.p,{children:"AWS Response:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "FileUploadGet": "https://myappstorage.s3.eu-west-1.amazonaws.com/client1/myfile.txt?<presigned_params>"\n  }\n}\n'})})]}),(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:"List"}),(0,o.jsxs)(n.p,{children:["Create a command in your application and call the ",(0,o.jsx)(n.code,{children:"list"})," method on the ",(0,o.jsx)(n.code,{children:"FileHandler"})," class with the directory you want to get the info and return the formatted results."]}),(0,o.jsx)(n.p,{children:"The storageName parameter is optional. It will use the first storage if undefined."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/commands/file-upload-list.ts"',children:"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\nimport { ListItem } from '@boostercloud/rocket-file-uploads-types'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadList {\n  public constructor(readonly directory: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadList, register: Register): Promise<Array<ListItem>> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.list(command.directory)\n  }\n}\n"})}),(0,o.jsx)(n.p,{children:"GraphQL Mutation:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'mutation {\n  FileUploadList(input: {\n    storageName: "clientst",\n    directory: "client1"\n    }\n  )\n}\n'})}),(0,o.jsx)(n.p,{children:"Response:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "FileUploadList": [\n      {\n        "name": "client1/myfile.txt",\n        "properties": {\n          "createdOn": "2022-10-26T05:40:47.000Z",\n          "lastModified": "2022-10-26T05:40:47.000Z",\n          "contentLength": 6,\n          "contentType": "text/plain"\n        }\n      }\n    ]\n  }\n}\n'})})]}),(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:"Delete File"}),(0,o.jsxs)(n.p,{children:["Create a command in your application and call the ",(0,o.jsx)(n.code,{children:"deleteFile"})," method on the ",(0,o.jsx)(n.code,{children:"FileHandler"})," class with the directory and file name you want to delete."]}),(0,o.jsx)(n.p,{children:"The storageName parameter is optional. It will use the first storage if undefined."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/commands/delete-file.ts"',children:"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\nimport { ListItem } from '@boostercloud/rocket-file-uploads-types'\n\n@Command({\n  authorize: 'all',\n})\nexport class DeleteFile {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: DeleteFile, register: Register): Promise<boolean> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.deleteFile(command.directory, command.fileName)\n  }\n}\n"})}),(0,o.jsx)(n.p,{children:"GraphQL Mutation:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'mutation {\n  DeleteFile(input: {\n    storageName: "clientst",\n    directory: "client1",\n    fileName: "myfile.txt"\n    }\n  )\n}\n'})}),(0,o.jsx)(n.p,{children:"Response:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "DeleteFile": true\n  }\n}\n'})})]})]}),(0,o.jsxs)(s.Z,{value:"local-provider",label:"Local Provider",default:!0,children:[(0,o.jsx)(n.p,{children:"Install needed dependency packages:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install --save @boostercloud/rocket-file-uploads-core @boostercloud/rocket-file-uploads-types\nnpm install --save @boostercloud/rocket-file-uploads-local\n"})}),(0,o.jsx)(n.p,{children:"Also, you will need a devDependency in your project:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"npm install --save-dev @boostercloud/rocket-file-uploads-local-infrastructure\n"})}),(0,o.jsx)(n.p,{children:"In your Booster config file, configure your BoosterRocketFiles:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/config/config.ts"',children:"import { Booster } from '@boostercloud/framework-core'\nimport { BoosterConfig } from '@boostercloud/framework-types'\nimport { BoosterRocketFiles } from '@boostercloud/rocket-file-uploads-core'\nimport { RocketFilesUserConfiguration } from '@boostercloud/rocket-file-uploads-types'\n\nconst rocketFilesConfigurationDefault: RocketFilesUserConfiguration = {\n  storageName: 'STORAGE_NAME',\n  containerName: 'CONTAINER_NAME',\n  directories: ['DIRECTORY_1', 'DIRECTORY_2'],\n}\n\nconst rocketFilesConfigurationCms: RocketFilesUserConfiguration = {\n  storageName: 'cmsst',\n  containerName: 'rocketfiles',\n  directories: ['cms1', 'cms2'],\n}\n\nBooster.configure('local', (config: BoosterConfig): void => {\n  config.appName = 'TEST_APP_NAME'\n  config.providerPackage = '@boostercloud/framework-provider-local'\n  config.rockets = [\n    new BoosterRocketFiles(config, [rocketFilesConfigurationDefault, rocketFilesConfigurationCms]).rocketForLocal(),\n  ]\n})\n"})}),(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsx)(n.p,{children:"Available parameters are:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"storageName"}),": Name of the storage repository."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"containerName"}),": Directories container."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"directories"}),": A list of folders where the files will be stored."]}),"\n"]}),(0,o.jsx)(n.hr,{}),(0,o.jsx)(n.p,{children:"The structure created will be:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"\u251c\u2500\u2500 storageName\n\u2502   \u251c\u2500\u2500 containerName\n\u2502   \u2502   \u251c\u2500\u2500 directory\n"})}),(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"NOTE:"})," Local Provider will use ",(0,o.jsx)(n.code,{children:"storageName"})," as the root folder name."]})]}),(0,o.jsx)(n.h2,{id:"rocket-methods-usage-2",children:"Rocket Methods Usage"}),(0,o.jsxs)(r,{children:[(0,o.jsxs)(n.p,{children:[(0,o.jsx)("summary",{children:"Presigned Put"}),"\nCreate a command in your application and call the ",(0,o.jsx)(n.code,{children:"presignedPut"})," method on the ",(0,o.jsx)(n.code,{children:"FileHandler"})," class with the directory and filename you want to upload on the storage."]}),(0,o.jsx)(n.p,{children:"The storageName parameter is optional. It will use the first storage if undefined."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/commands/file-upload-put.ts"',children:"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadPut {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadPut, register: Register): Promise<string> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.presignedPut(command.directory, command.fileName)\n  }\n}\n"})}),(0,o.jsx)(n.p,{children:"GraphQL Mutation:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'mutation {\n  FileUploadPut(input: {\n    storageName: "clientst",\n    directory: "client1",\n    fileName: "myfile.txt"\n    }\n  )\n}\n'})}),(0,o.jsx)(n.p,{children:"Response:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "FileUploadPut": "http://localhost:3000/clientst/rocketfiles/client1/myfile.txt"\n  }\n}\n'})})]}),(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:"Presigned Get"}),(0,o.jsxs)(n.p,{children:["Create a command in your application and call the ",(0,o.jsx)(n.code,{children:"presignedGet"})," method on the ",(0,o.jsx)(n.code,{children:"FileHandler"})," class with the directory and filename you want to get on the storage."]}),(0,o.jsx)(n.p,{children:"The storageName parameter is optional. It will use the first storage if undefined."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/commands/file-upload-get.ts"',children:"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadGet {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadGet, register: Register): Promise<string> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.presignedGet(command.directory, command.fileName)\n  }\n}\n"})}),(0,o.jsx)(n.p,{children:"GraphQL Mutation:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'mutation {\n  FileUploadGet(input: {\n    storageName: "clientst",\n    directory: "client1",\n    fileName: "myfile.txt"\n  }\n  )\n}\n'})}),(0,o.jsx)(n.p,{children:"Response:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "FileUploadGet": "http://localhost:3000/clientst/rocketfiles/client1/myfile.txt"\n  }\n}\n'})})]}),(0,o.jsxs)(r,{children:[(0,o.jsx)("summary",{children:"List"}),(0,o.jsxs)(n.p,{children:["Create a command in your application and call the ",(0,o.jsx)(n.code,{children:"list"})," method on the ",(0,o.jsx)(n.code,{children:"FileHandler"})," class with the directory you want to get the info and return the formatted results."]}),(0,o.jsx)(n.p,{children:"The storageName parameter is optional. It will use the first storage if undefined."}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",metastring:'title="src/commands/file-upload-list.ts"',children:"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\nimport { ListItem } from '@boostercloud/rocket-file-uploads-types'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadList {\n  public constructor(readonly directory: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadList, register: Register): Promise<Array<ListItem>> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.list(command.directory)\n  }\n}\n"})}),(0,o.jsx)(n.p,{children:"GraphQL Mutation:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'mutation {\n  FileUploadList(input: {\n    storageName: "clientst",\n    directory: "client1"\n    }\n  )\n}\n'})}),(0,o.jsx)(n.p,{children:"Response:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "data": {\n    "FileUploadList": [\n      {\n        "name": "client1/myfile.txt",\n        "properties": {\n          "lastModified": "2022-10-26T10:35:18.905Z"\n        }\n      }\n    ]\n  }\n}\n'})})]}),(0,o.jsx)(r,{children:(0,o.jsxs)(n.p,{children:[(0,o.jsx)("summary",{children:"Delete File"}),"\nCurrently, the option to delete a file is only available on AWS. If this is a feature you were looking for, please let us know on Discord. Alternatively, you can implement this feature and submit a pull request on GitHub for this Rocket!"]})}),(0,o.jsx)(n.h2,{id:"security",children:"Security"}),(0,o.jsx)(n.p,{children:"Local Provider doesn't check paths. You should check that the directory and files passed as paratemers are valid."})]})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"events",children:"Events"}),"\n",(0,o.jsxs)(n.p,{children:["For each uploaded file a new event will be automatically generated and properly reduced on the entity ",(0,o.jsx)(n.code,{children:"UploadedFileEntity"}),"."]}),"\n",(0,o.jsxs)(i.Z,{groupId:"providers-usage",children:[(0,o.jsxs)(s.Z,{value:"azure-and-aws-provider",label:"Azure & AWS Provider",default:!0,children:[(0,o.jsx)(n.p,{children:"The event will look like this:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'{\n  "version": 1,\n  "kind": "snapshot",\n  "superKind": "domain",\n  "requestID": "xxx",\n  "entityID": "xxxx",\n  "entityTypeName": "UploadedFileEntity",\n  "typeName": "UploadedFileEntity",\n  "value": {\n    "id": "xxx",\n    "metadata": {\n      // A bunch of fields (depending on Azure or AWS)\n    }\n  },\n  "createdAt": "2022-10-26T10:23:36.562Z",\n  "snapshottedEventCreatedAt": "2022-10-26T10:23:32.34Z",\n  "entityTypeName_entityID_kind": "UploadedFileEntity-xxx-b842-x-8975-xx-snapshot",\n  "id": "x-x-x-x-x",\n  "_rid": "x==",\n  "_self": "dbs/x==/colls/x=/docs/x==/",\n  "_etag": "\\"x-x-0500-0000-x\\"",\n  "_attachments": "attachments/",\n  "_ts": 123456\n}\n'})})]}),(0,o.jsxs)(s.Z,{value:"local-provider",label:"Local Provider",default:!0,children:[(0,o.jsx)(n.p,{children:"The event will look like this:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'{\n  "version": 1,\n  "kind": "snapshot",\n  "superKind": "domain",\n  "requestID": "x",\n  "entityID": "x",\n  "entityTypeName": "UploadedFileEntity",\n  "typeName": "UploadedFileEntity",\n  "value": {\n    "id": "x",\n    "metadata": {\n      "uri": "http://localhost:3000/clientst/rocketfiles/client1/myfile.txt",\n      "name": "client1/myfile.txt"\n    }\n  },\n  "createdAt": "2022-10-26T10:35:18.967Z",\n  "snapshottedEventCreatedAt": "2022-10-26T10:35:18.958Z",\n  "_id": "lMolccTNJVojXiLz"\n}\n'})})]})]}),"\n",(0,o.jsx)(n.h2,{id:"todos",children:"TODOs"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Add file deletion to Azure and Local (only supported in AWS at the moment)."}),"\n",(0,o.jsx)(n.li,{children:"Optional storage deletion when unmounting the stack."}),"\n",(0,o.jsx)(n.li,{children:"Optional events, in case you don't want to store that information in the events-store."}),"\n",(0,o.jsx)(n.li,{children:"When deleting a file, save a deletion event in the events-store. Only uploads are stored at the moment."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},5162:(e,n,r)=>{r.d(n,{Z:()=>i});r(7294);var o=r(512);const t={tabItem:"tabItem_Ymn6"};var s=r(5893);function i(e){let{children:n,hidden:r,className:i}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,o.Z)(t.tabItem,i),hidden:r,children:n})}},4866:(e,n,r)=>{r.d(n,{Z:()=>k});var o=r(7294),t=r(512),s=r(2466),i=r(6550),a=r(469),l=r(1980),c=r(7392),d=r(12);function u(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:n,children:r}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:o,default:t}}=e;return{value:n,label:r,attributes:o,default:t}}))}(r);return function(e){const n=(0,c.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function p(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:r}=e;const t=(0,i.k6)(),s=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,l._X)(s),(0,o.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})}),[s,t])]}function g(e){const{defaultValue:n,queryString:r=!1,groupId:t}=e,s=m(e),[i,l]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const o=r.find((e=>e.default))??r[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:s}))),[c,u]=h({queryString:r,groupId:t}),[g,f]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,s]=(0,d.Nk)(r);return[t,(0,o.useCallback)((e=>{r&&s.set(e)}),[r,s])]}({groupId:t}),x=(()=>{const e=c??g;return p({value:e,tabValues:s})?e:null})();(0,a.Z)((()=>{x&&l(x)}),[x]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)}),[u,f,s]),tabValues:s}}var f=r(2389);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=r(5893);function y(e){let{className:n,block:r,selectedValue:o,selectValue:i,tabValues:a}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),d=e=>{const n=e.currentTarget,r=l.indexOf(n),t=a[r].value;t!==o&&(c(n),i(t))},u=e=>{let n=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=l.indexOf(e.currentTarget)+1;n=l[r]??l[0];break}case"ArrowLeft":{const r=l.indexOf(e.currentTarget)-1;n=l[r]??l[l.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.Z)("tabs",{"tabs--block":r},n),children:a.map((e=>{let{value:n,label:r,attributes:s}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:o===n?0:-1,"aria-selected":o===n,ref:e=>l.push(e),onKeyDown:u,onClick:d,...s,className:(0,t.Z)("tabs__item",x.tabItem,s?.className,{"tabs__item--active":o===n}),children:r??n},n)}))})}function b(e){let{lazy:n,children:r,selectedValue:t}=e;const s=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=s.find((e=>e.props.value===t));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function N(e){const n=g(e);return(0,j.jsxs)("div",{className:(0,t.Z)("tabs-container",x.tabList),children:[(0,j.jsx)(y,{...e,...n}),(0,j.jsx)(b,{...e,...n})]})}function k(e){const n=(0,f.Z)();return(0,j.jsx)(N,{...e,children:u(e.children)},String(n))}},1151:(e,n,r)=>{r.d(n,{Z:()=>a,a:()=>i});var o=r(7294);const t={},s=o.createContext(t);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);