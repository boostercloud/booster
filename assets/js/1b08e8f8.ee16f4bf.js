"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1588],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return n?o.createElement(f,l(l({ref:t},d),{},{components:n})):o.createElement(f,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var o=n(7294),r=n(6010);const a="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return o.createElement("div",{role:"tabpanel",className:(0,r.Z)(a,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var o=n(7462),r=n(7294),a=n(6010),l=n(2466),i=n(6550),s=n(1980),c=n(7392),d=n(12);function u(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:r}}=e;return{value:t,label:n,attributes:o,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const o=(0,i.k6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(a),(0,r.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(o.location.search);t.set(a,e),o.replace({...o.location,search:t.toString()})}),[a,o])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,a=p(e),[l,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:a}))),[s,c]=f({queryString:n,groupId:o}),[u,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,a]=(0,d.Nk)(n);return[o,(0,r.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:o}),k=(()=>{const e=s??u;return m({value:e,tabValues:a})?e:null})();(0,r.useLayoutEffect)((()=>{k&&i(k)}),[k]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),g(e)}),[c,g,a]),tabValues:a}}var k=n(2389);const y="tabList__CuJ",N="tabItem_LNqP";function h(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:c}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=d.indexOf(t),o=c[n].value;o!==i&&(u(t),s(o))},m=e=>{var t;let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,o.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:p},l,{className:(0,a.Z)("tabs__item",N,null==l?void 0:l.className,{"tabs__item--active":i===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:o}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==o}))))}function v(e){const t=g(e);return r.createElement("div",{className:(0,a.Z)("tabs-container",y)},r.createElement(h,(0,o.Z)({},e,t)),r.createElement(b,(0,o.Z)({},e,t)))}function w(e){const t=(0,k.Z)();return r.createElement(v,(0,o.Z)({key:String(t)},e))}},8379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var o=n(7462),r=(n(7294),n(3905)),a=n(5162),l=n(4866);const i={},s="File Uploads Rocket",c={unversionedId:"going-deeper/rockets/rocket-file-uploads",id:"going-deeper/rockets/rocket-file-uploads",title:"File Uploads Rocket",description:"This package is a configurable rocket to add a storage API to your Booster applications.",source:"@site/docs/10_going-deeper/rockets/rocket-file-uploads.md",sourceDirName:"10_going-deeper/rockets",slug:"/going-deeper/rockets/rocket-file-uploads",permalink:"/going-deeper/rockets/rocket-file-uploads",draft:!1,editUrl:"https://github.com/boostercloud/booster/tree/main/website/docs/10_going-deeper/rockets/rocket-file-uploads.md",tags:[],version:"current",lastUpdatedBy:"Javier Toledo",lastUpdatedAt:1695984635,formattedLastUpdatedAt:"Sep 29, 2023",frontMatter:{},sidebar:"docs",previous:{title:"Extending Booster with Rockets!",permalink:"/going-deeper/rockets"},next:{title:"Backup Booster Rocket",permalink:"/going-deeper/rockets/rocket-backup-booster"}},d={},u=[{value:"Supported Providers",id:"supported-providers",level:2},{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"Rocket Methods Usage",id:"rocket-methods-usage",level:2},{value:"Azure Roles",id:"azure-roles",level:2},{value:"Rocket Methods Usage",id:"rocket-methods-usage-1",level:2},{value:"Rocket Methods Usage",id:"rocket-methods-usage-2",level:2},{value:"Security",id:"security",level:2},{value:"Events",id:"events",level:2},{value:"TODOs",id:"todos",level:2}],p={toc:u};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"file-uploads-rocket"},"File Uploads Rocket"),(0,r.kt)("p",null,"This package is a configurable rocket to add a storage API to your Booster applications."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/boostercloud/rocket-file-uploads"},"GitHub Repo"))),(0,r.kt)("h2",{id:"supported-providers"},"Supported Providers"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Azure Provider"),(0,r.kt)("li",{parentName:"ul"},"AWS Provider"),(0,r.kt)("li",{parentName:"ul"},"Local Provider")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,"This rocket provides some methods to access files stores in your cloud provider:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"presignedPut"),": Returns a presigned put url and the necessary form params. With this url files can be uploaded directly to your provider."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"presignedGet"),":  Returns a presigned get url to download a file. With this url files can be downloaded directly from your provider."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"list"),": Returns a list of files stored in the provider."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"deleteFile"),": Removes a file from a directory (only supported in AWS at the moment).")),(0,r.kt)("p",null,"These methods may be used from a Command in your project secured via JWT Token.\nThis rocket also provides a Booster Event each time a file is uploaded."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)(l.Z,{groupId:"providers-usage",mdxType:"Tabs"},(0,r.kt)(a.Z,{value:"azure-provider",label:"Azure Provider",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Install needed dependency packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @boostercloud/rocket-file-uploads-core @boostercloud/rocket-file-uploads-types\nnpm install --save @boostercloud/rocket-file-uploads-azure\n")),(0,r.kt)("p",null,"Also, you will need a devDependency in your project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @boostercloud/rocket-file-uploads-azure-infrastructure\n")),(0,r.kt)("p",null,"In your Booster config file, configure your BoosterRocketFiles:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/config/config.ts"',title:'"src/config/config.ts"'},"import { Booster } from '@boostercloud/framework-core'\nimport { BoosterConfig } from '@boostercloud/framework-types'\nimport { BoosterRocketFiles } from '@boostercloud/rocket-file-uploads-core'\nimport { RocketFilesUserConfiguration } from '@boostercloud/rocket-file-uploads-types'\n\nconst rocketFilesConfigurationDefault: RocketFilesUserConfiguration = {\n  storageName: 'STORAGE_NAME',\n  containerName: 'CONTAINER_NAME',\n  directories: ['DIRECTORY_1', 'DIRECTORY_2'],\n}\n\nconst rocketFilesConfigurationCms: RocketFilesUserConfiguration = {\n  storageName: 'cmsst',\n  containerName: 'rocketfiles',\n  directories: ['cms1', 'cms2'],\n}\n\nBooster.configure('production', (config: BoosterConfig): void => {\n  config.appName = 'TEST_APP_NAME'\n  config.providerPackage = '@boostercloud/framework-provider-azure'\n  config.rockets = [\n    new BoosterRocketFiles(config, [rocketFilesConfigurationDefault, rocketFilesConfigurationCms]).rocketForAzure(),\n  ]\n})\n\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Available parameters are:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"storageName"),": Name of the storage repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"containerName"),": Directories container."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"directories"),": A list of folders where the files will be stored.")),(0,r.kt)("hr",{parentName:"admonition"}),(0,r.kt)("p",{parentName:"admonition"},"The structure created will be:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u251c\u2500\u2500 storageName\n\u2502   \u251c\u2500\u2500 containerName\n\u2502   \u2502   \u251c\u2500\u2500 directory\n")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"NOTE:")," Azure Provider will use ",(0,r.kt)("inlineCode",{parentName:"p"},"storageName")," as the Storage Account Name.")),(0,r.kt)("h2",{id:"rocket-methods-usage"},"Rocket Methods Usage"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Presigned Put"),(0,r.kt)("p",null,"Create a command in your application and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"presignedPut")," method on the ",(0,r.kt)("inlineCode",{parentName:"p"},"FileHandler")," class with the directory and filename you want to upload on the storage."),(0,r.kt)("p",null,"The storageName parameter is optional. It will use the first storage if undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/commands/file-upload-put.ts"',title:'"src/commands/file-upload-put.ts"'},"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadPut {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadPut, register: Register): Promise<string> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.presignedPut(command.directory, command.fileName)\n  }\n}\n")),(0,r.kt)("p",null,"GraphQL Mutation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'mutation {\n  FileUploadPut(input: {\n    storageName: "clientst",\n    directory: "client1",\n    fileName: "myfile.txt"\n    }\n  )\n}\n')),(0,r.kt)("p",null,"Azure Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "FileUploadPut": "https://clientst.blob.core.windows.net/rocketfiles/client1/myfile.txt?<SAS>"\n  }\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Presigned Get"),(0,r.kt)("p",null,"Create a command in your application and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"presignedGet")," method on the ",(0,r.kt)("inlineCode",{parentName:"p"},"FileHandler")," class with the directory and filename you want to get on the storage."),(0,r.kt)("p",null,"The storageName parameter is optional. It will use the first storage if undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/commands/file-upload-get.ts"',title:'"src/commands/file-upload-get.ts"'},"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadGet {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadGet, register: Register): Promise<string> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.presignedGet(command.directory, command.fileName)\n  }\n}\n")),(0,r.kt)("p",null,"GraphQL Mutation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'mutation {\n  FileUploadGet(input: {\n    storageName: "clientst",\n    directory: "client1",\n    fileName: "myfile.txt"\n  }\n  )\n}\n')),(0,r.kt)("p",null,"Azure Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "FileUploadGet": "https://clientst.blob.core.windows.net/rocketfiles/folder01%2Fmyfile.txt?<SAS>"\n  }\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"List"),(0,r.kt)("p",null,"Create a command in your application and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," method on the ",(0,r.kt)("inlineCode",{parentName:"p"},"FileHandler")," class with the directory you want to get the info and return the formatted results."),(0,r.kt)("p",null,"The storageName parameter is optional. It will use the first storage if undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/commands/file-upload-list.ts"',title:'"src/commands/file-upload-list.ts"'},"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\nimport { ListItem } from '@boostercloud/rocket-file-uploads-types'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadList {\n  public constructor(readonly directory: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadList, register: Register): Promise<Array<ListItem>> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.list(command.directory)\n  }\n}\n")),(0,r.kt)("p",null,"GraphQL Mutation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'mutation {\n  FileUploadList(input: {\n    storageName: "clientst",\n    directory: "client1"\n    }\n  )\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "FileUploadList": [\n      {\n        "name": "client1/myfile.txt",\n        "properties": {\n          "createdOn": "2022-10-26T05:40:47.000Z",\n          "lastModified": "2022-10-26T05:40:47.000Z",\n          "contentLength": 6,\n          "contentType": "text/plain"\n        }\n      }\n    ]\n  }\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Delete File"),"Currently, the option to delete a file is only available on AWS. If this is a feature you were looking for, please let us know on Discord. Alternatively, you can implement this feature and submit a pull request on GitHub for this Rocket!"),(0,r.kt)("h2",{id:"azure-roles"},"Azure Roles"),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Starting at version ",(0,r.kt)("strong",{parentName:"p"},"0.31.0")," this Rocket use Managed Identities instead of Connection Strings. Please, check that you have the required permissions to assign roles ",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/role-based-access-control/role-assignments-portal-managed-identity#prerequisites"},"https://learn.microsoft.com/en-us/azure/role-based-access-control/role-assignments-portal-managed-identity#prerequisites"))),(0,r.kt)("p",null,"For uploading files to Azure you need the Storage Blob Data Contributor role. This can be assigned to a user using the portal or with the next scripts:"),(0,r.kt)("p",null,"First, check if you have the correct permissions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ACCOUNT_NAME="<STORAGE ACCOUNT NAME>"\nCONTAINER_NAME="<CONTAINER NAME>"\n\n# use this to test if you have the correct permissions\naz storage blob exists --account-name $ACCOUNT_NAME `\n                        --container-name $CONTAINER_NAME `\n                        --name blob1.txt --auth-mode login\n')),(0,r.kt)("p",null,"If you don't have it, then run this script as admin:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'ACCOUNT_NAME="<STORAGE ACCOUNT NAME>"\nCONTAINER_NAME="<CONTAINER NAME>"\n\nOBJECT_ID=$(az ad user list --query "[?mailNickname==\'<YOUR MAIL NICK NAME>\'].objectId" -o tsv)\nSTORAGE_ID=$(az storage account show -n $ACCOUNT_NAME --query id -o tsv)\n\naz role assignment create \\\n    --role "Storage Blob Data Contributor" \\\n    --assignee $OBJECT_ID \\\n    --scope "$STORAGE_ID/blobServices/default/containers/$CONTAINER_NAME"\n'))),(0,r.kt)(a.Z,{value:"aws-provider",label:"AWS Provider",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Install needed dependency packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @boostercloud/rocket-file-uploads-core @boostercloud/rocket-file-uploads-types\nnpm install --save @boostercloud/rocket-file-uploads-aws\n")),(0,r.kt)("p",null,"Also, you will need a devDependency in your project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @boostercloud/rocket-file-uploads-aws-infrastructure\n")),(0,r.kt)("p",null,"In your Booster config file, configure your BoosterRocketFiles:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/config/config.ts"',title:'"src/config/config.ts"'},"import { Booster } from '@boostercloud/framework-core'\nimport { BoosterConfig } from '@boostercloud/framework-types'\nimport { BoosterRocketFiles } from '@boostercloud/rocket-file-uploads-core'\nimport { RocketFilesUserConfiguration } from '@boostercloud/rocket-file-uploads-types'\n\nconst rocketFilesConfigurationDefault: RocketFilesUserConfiguration = {\n  storageName: 'STORAGE_NAME',\n  containerName: '', // Not used in AWS, you can just pass an empty string\n  directories: ['DIRECTORY_1', 'DIRECTORY_2'],\n}\n\nconst rocketFilesConfigurationCms: RocketFilesUserConfiguration = {\n  storageName: 'cmsst',\n  containerName: '', // Not used in AWS, you can just pass an empty string\n  directories: ['cms1', 'cms2'],\n}\n\nBooster.configure('production', (config: BoosterConfig): void => {\n  config.appName = 'TEST_APP_NAME'\n  config.providerPackage = '@boostercloud/framework-provider-aws'\n  config.rockets = [\n    new BoosterRocketFiles(config, [rocketFilesConfigurationDefault, rocketFilesConfigurationCms]).rocketForAWS(),\n  ]\n})\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Available parameters are:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"storageName"),": Name of the storage repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"directories"),": A list of folders where the files will be stored.")),(0,r.kt)("hr",{parentName:"admonition"}),(0,r.kt)("p",{parentName:"admonition"},"The structure created will be:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u251c\u2500\u2500 storageName\n\u2502   \u251c\u2500\u2500 directory\n"))),(0,r.kt)("h2",{id:"rocket-methods-usage-1"},"Rocket Methods Usage"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Presigned Put"),(0,r.kt)("p",null,"Create a command in your application and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"presignedPut")," method on the ",(0,r.kt)("inlineCode",{parentName:"p"},"FileHandler")," class with the directory and filename you want to upload on the storage."),(0,r.kt)("p",null,"The storageName parameter is optional. It will use the first storage if undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/commands/file-upload-put.ts"',title:'"src/commands/file-upload-put.ts"'},"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadPut {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadPut, register: Register): Promise<PresignedPostResponse> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.presignedPut(command.directory, command.fileName) as Promise<PresignedPostResponse>\n  }\n}\n")),(0,r.kt)("p",null,"GraphQL Mutation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'mutation {\n  FileUploadPut(input: { \n    directory: "files", \n    fileName: "lol.jpg"\n  }) {\n    url\n    fields\n  }\n}\n')),(0,r.kt)("p",null,"AWS Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "FileUploadPut": {\n      "url": "https://s3.eu-west-1.amazonaws.com/myappstorage",\n      "fields": {\n        "Key": "files/lol.jpg",\n        "bucket": "myappstorage",\n        "X-Amz-Algorithm": "AWS4-HMAC-SHA256",\n        "X-Amz-Credential": "blablabla.../eu-west-1/s3/aws4_request",\n        "X-Amz-Date": "20230207T142138Z",\n        "X-Amz-Security-Token": "IQoJb3JpZ2... blablabla",\n        "Policy": "eyJleHBpcmF0a... blablabla",\n        "X-Amz-Signature": "60511... blablabla"\n      }\n    }\n  }\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Presigned Get"),(0,r.kt)("p",null,"Create a command in your application and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"presignedGet")," method on the ",(0,r.kt)("inlineCode",{parentName:"p"},"FileHandler")," class with the directory and filename you want to get on the storage."),(0,r.kt)("p",null,"The storageName parameter is optional. It will use the first storage if undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/commands/file-upload-get.ts"',title:'"src/commands/file-upload-get.ts"'},"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadGet {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadGet, register: Register): Promise<string> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.presignedGet(command.directory, command.fileName)\n  }\n}\n")),(0,r.kt)("p",null,"GraphQL Mutation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'mutation {\n  FileUploadGet(input: {\n    storageName: "clientst",\n    directory: "client1",\n    fileName: "myfile.txt"\n  }\n  )\n}\n')),(0,r.kt)("p",null,"AWS Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "FileUploadGet": "https://myappstorage.s3.eu-west-1.amazonaws.com/client1/myfile.txt?<presigned_params>"\n  }\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"List"),(0,r.kt)("p",null,"Create a command in your application and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," method on the ",(0,r.kt)("inlineCode",{parentName:"p"},"FileHandler")," class with the directory you want to get the info and return the formatted results."),(0,r.kt)("p",null,"The storageName parameter is optional. It will use the first storage if undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/commands/file-upload-list.ts"',title:'"src/commands/file-upload-list.ts"'},"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\nimport { ListItem } from '@boostercloud/rocket-file-uploads-types'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadList {\n  public constructor(readonly directory: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadList, register: Register): Promise<Array<ListItem>> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.list(command.directory)\n  }\n}\n")),(0,r.kt)("p",null,"GraphQL Mutation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'mutation {\n  FileUploadList(input: {\n    storageName: "clientst",\n    directory: "client1"\n    }\n  )\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "FileUploadList": [\n      {\n        "name": "client1/myfile.txt",\n        "properties": {\n          "createdOn": "2022-10-26T05:40:47.000Z",\n          "lastModified": "2022-10-26T05:40:47.000Z",\n          "contentLength": 6,\n          "contentType": "text/plain"\n        }\n      }\n    ]\n  }\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Delete File"),(0,r.kt)("p",null,"Create a command in your application and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"deleteFile")," method on the ",(0,r.kt)("inlineCode",{parentName:"p"},"FileHandler")," class with the directory and file name you want to delete."),(0,r.kt)("p",null,"The storageName parameter is optional. It will use the first storage if undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/commands/delete-file.ts"',title:'"src/commands/delete-file.ts"'},"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\nimport { ListItem } from '@boostercloud/rocket-file-uploads-types'\n\n@Command({\n  authorize: 'all',\n})\nexport class DeleteFile {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: DeleteFile, register: Register): Promise<boolean> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.deleteFile(command.directory, command.fileName)\n  }\n}\n")),(0,r.kt)("p",null,"GraphQL Mutation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'mutation {\n  DeleteFile(input: {\n    storageName: "clientst",\n    directory: "client1",\n    fileName: "myfile.txt"\n    }\n  )\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "DeleteFile": true\n  }\n}\n')))),(0,r.kt)(a.Z,{value:"local-provider",label:"Local Provider",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Install needed dependency packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save @boostercloud/rocket-file-uploads-core @boostercloud/rocket-file-uploads-types\nnpm install --save @boostercloud/rocket-file-uploads-local\n")),(0,r.kt)("p",null,"Also, you will need a devDependency in your project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"npm install --save-dev @boostercloud/rocket-file-uploads-local-infrastructure\n")),(0,r.kt)("p",null,"In your Booster config file, configure your BoosterRocketFiles:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/config/config.ts"',title:'"src/config/config.ts"'},"import { Booster } from '@boostercloud/framework-core'\nimport { BoosterConfig } from '@boostercloud/framework-types'\nimport { BoosterRocketFiles } from '@boostercloud/rocket-file-uploads-core'\nimport { RocketFilesUserConfiguration } from '@boostercloud/rocket-file-uploads-types'\n\nconst rocketFilesConfigurationDefault: RocketFilesUserConfiguration = {\n  storageName: 'STORAGE_NAME',\n  containerName: 'CONTAINER_NAME',\n  directories: ['DIRECTORY_1', 'DIRECTORY_2'],\n}\n\nconst rocketFilesConfigurationCms: RocketFilesUserConfiguration = {\n  storageName: 'cmsst',\n  containerName: 'rocketfiles',\n  directories: ['cms1', 'cms2'],\n}\n\nBooster.configure('local', (config: BoosterConfig): void => {\n  config.appName = 'TEST_APP_NAME'\n  config.providerPackage = '@boostercloud/framework-provider-local'\n  config.rockets = [\n    new BoosterRocketFiles(config, [rocketFilesConfigurationDefault, rocketFilesConfigurationCms]).rocketForLocal(),\n  ]\n})\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Available parameters are:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"storageName"),": Name of the storage repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"containerName"),": Directories container."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"directories"),": A list of folders where the files will be stored.")),(0,r.kt)("hr",{parentName:"admonition"}),(0,r.kt)("p",{parentName:"admonition"},"The structure created will be:"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-text"},"\u251c\u2500\u2500 storageName\n\u2502   \u251c\u2500\u2500 containerName\n\u2502   \u2502   \u251c\u2500\u2500 directory\n")),(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"NOTE:")," Local Provider will use ",(0,r.kt)("inlineCode",{parentName:"p"},"storageName")," as the root folder name.")),(0,r.kt)("h2",{id:"rocket-methods-usage-2"},"Rocket Methods Usage"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Presigned Put"),"Create a command in your application and call the `presignedPut` method on the `FileHandler` class with the directory and filename you want to upload on the storage.",(0,r.kt)("p",null,"The storageName parameter is optional. It will use the first storage if undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/commands/file-upload-put.ts"',title:'"src/commands/file-upload-put.ts"'},"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadPut {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadPut, register: Register): Promise<string> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.presignedPut(command.directory, command.fileName)\n  }\n}\n")),(0,r.kt)("p",null,"GraphQL Mutation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'mutation {\n  FileUploadPut(input: {\n    storageName: "clientst",\n    directory: "client1",\n    fileName: "myfile.txt"\n    }\n  )\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "FileUploadPut": "http://localhost:3000/clientst/rocketfiles/client1/myfile.txt"\n  }\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Presigned Get"),(0,r.kt)("p",null,"Create a command in your application and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"presignedGet")," method on the ",(0,r.kt)("inlineCode",{parentName:"p"},"FileHandler")," class with the directory and filename you want to get on the storage."),(0,r.kt)("p",null,"The storageName parameter is optional. It will use the first storage if undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/commands/file-upload-get.ts"',title:'"src/commands/file-upload-get.ts"'},"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadGet {\n  public constructor(readonly directory: string, readonly fileName: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadGet, register: Register): Promise<string> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.presignedGet(command.directory, command.fileName)\n  }\n}\n")),(0,r.kt)("p",null,"GraphQL Mutation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'mutation {\n  FileUploadGet(input: {\n    storageName: "clientst",\n    directory: "client1",\n    fileName: "myfile.txt"\n  }\n  )\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "FileUploadGet": "http://localhost:3000/clientst/rocketfiles/client1/myfile.txt"\n  }\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"List"),(0,r.kt)("p",null,"Create a command in your application and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," method on the ",(0,r.kt)("inlineCode",{parentName:"p"},"FileHandler")," class with the directory you want to get the info and return the formatted results."),(0,r.kt)("p",null,"The storageName parameter is optional. It will use the first storage if undefined."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="src/commands/file-upload-list.ts"',title:'"src/commands/file-upload-list.ts"'},"import { Booster, Command } from '@boostercloud/framework-core'\nimport { Register } from '@boostercloud/framework-types'\nimport { FileHandler } from '@boostercloud/rocket-file-uploads-core'\nimport { ListItem } from '@boostercloud/rocket-file-uploads-types'\n\n@Command({\n  authorize: 'all',\n})\nexport class FileUploadList {\n  public constructor(readonly directory: string, readonly storageName?: string) {}\n\n  public static async handle(command: FileUploadList, register: Register): Promise<Array<ListItem>> {\n    const boosterConfig = Booster.config\n    const fileHandler = new FileHandler(boosterConfig, command.storageName)\n    return await fileHandler.list(command.directory)\n  }\n}\n")),(0,r.kt)("p",null,"GraphQL Mutation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'mutation {\n  FileUploadList(input: {\n    storageName: "clientst",\n    directory: "client1"\n    }\n  )\n}\n')),(0,r.kt)("p",null,"Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "FileUploadList": [\n      {\n        "name": "client1/myfile.txt",\n        "properties": {\n          "lastModified": "2022-10-26T10:35:18.905Z"\n        }\n      }\n    ]\n  }\n}\n'))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Delete File"),"Currently, the option to delete a file is only available on AWS. If this is a feature you were looking for, please let us know on Discord. Alternatively, you can implement this feature and submit a pull request on GitHub for this Rocket!"),(0,r.kt)("h2",{id:"security"},"Security"),(0,r.kt)("p",null,"Local Provider doesn't check paths. You should check that the directory and files passed as paratemers are valid."))),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"events"},"Events"),(0,r.kt)("p",null,"For each uploaded file a new event will be automatically generated and properly reduced on the entity ",(0,r.kt)("inlineCode",{parentName:"p"},"UploadedFileEntity"),"."),(0,r.kt)(l.Z,{groupId:"providers-usage",mdxType:"Tabs"},(0,r.kt)(a.Z,{value:"azure-and-aws-provider",label:"Azure & AWS Provider",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"The event will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "version": 1,\n  "kind": "snapshot",\n  "superKind": "domain",\n  "requestID": "xxx",\n  "entityID": "xxxx",\n  "entityTypeName": "UploadedFileEntity",\n  "typeName": "UploadedFileEntity",\n  "value": {\n    "id": "xxx",\n    "metadata": {\n      // A bunch of fields (depending on Azure or AWS)\n    }\n  },\n  "createdAt": "2022-10-26T10:23:36.562Z",\n  "snapshottedEventCreatedAt": "2022-10-26T10:23:32.34Z",\n  "entityTypeName_entityID_kind": "UploadedFileEntity-xxx-b842-x-8975-xx-snapshot",\n  "id": "x-x-x-x-x",\n  "_rid": "x==",\n  "_self": "dbs/x==/colls/x=/docs/x==/",\n  "_etag": "\\"x-x-0500-0000-x\\"",\n  "_attachments": "attachments/",\n  "_ts": 123456\n}\n'))),(0,r.kt)(a.Z,{value:"local-provider",label:"Local Provider",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"The event will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'{\n  "version": 1,\n  "kind": "snapshot",\n  "superKind": "domain",\n  "requestID": "x",\n  "entityID": "x",\n  "entityTypeName": "UploadedFileEntity",\n  "typeName": "UploadedFileEntity",\n  "value": {\n    "id": "x",\n    "metadata": {\n      "uri": "http://localhost:3000/clientst/rocketfiles/client1/myfile.txt",\n      "name": "client1/myfile.txt"\n    }\n  },\n  "createdAt": "2022-10-26T10:35:18.967Z",\n  "snapshottedEventCreatedAt": "2022-10-26T10:35:18.958Z",\n  "_id": "lMolccTNJVojXiLz"\n}\n')))),(0,r.kt)("h2",{id:"todos"},"TODOs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add file deletion to Azure and Local (only supported in AWS at the moment)."),(0,r.kt)("li",{parentName:"ul"},"Optional storage deletion when unmounting the stack."),(0,r.kt)("li",{parentName:"ul"},"Optional events, in case you don't want to store that information in the events-store."),(0,r.kt)("li",{parentName:"ul"},"When deleting a file, save a deletion event in the events-store. Only uploads are stored at the moment.")))}m.isMDXComponent=!0}}]);