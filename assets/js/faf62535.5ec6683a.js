"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5298],{6564:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var t=i(5893),s=i(1151);const r={title:"BEEP 3 - Principles of Design",authors:["NickSeagull"],date:"2024-01-25T00:01"},o=void 0,a={permalink:"/blog/0003-principles-of-design",editUrl:"https://github.com/boostercloud/booster/edit/main/website/proposals/0003-principles-of-design/index.mdx",source:"@site/proposals/0003-principles-of-design/index.mdx",title:"BEEP 3 - Principles of Design",description:"Introduction",date:"2024-01-25T00:01:00.000Z",formattedDate:"January 25, 2024",tags:[],readingTime:3.715,hasTruncateMarker:!1,authors:[{name:"Nick Tchayka",title:"Booster Core Team",url:"https://github.com/NickSeagull",imageURL:"https://github.com/NickSeagull.png",key:"NickSeagull"}],frontMatter:{title:"BEEP 3 - Principles of Design",authors:["NickSeagull"],date:"2024-01-25T00:01"},unlisted:!1,prevItem:{title:"BEEP 2 - Target and User Persona",permalink:"/blog/0002-project-target"},nextItem:{title:"BEEP 4 - Semantic Versioning",permalink:"/blog/0004-semantic-versioning"}},l={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Principle of Least Astonishment",id:"principle-of-least-astonishment",level:2},{value:"Examples",id:"examples",level:3},{value:"Principle of Developer Happiness",id:"principle-of-developer-happiness",level:2},{value:"Examples",id:"examples-1",level:3},{value:"Principle of Least Effort",id:"principle-of-least-effort",level:2},{value:"Examples",id:"examples-2",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{title:"STATUS - ACCEPTED",type:"tip"}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["This document lays out the design principles guiding the design and implementation processes of the Booster Framework. These principles are crucial in steering both high-level and low-level decision-making within the project. They are pivotal in ensuring that the project remains focused on the correct aspects of design and implementation, always keeping in mind ",(0,t.jsx)(n.a,{href:"/blog/0002-project-target",children:"the target audience and user persona"}),", as they are the most important stakeholders of the project."]}),"\n",(0,t.jsx)(n.h2,{id:"principle-of-least-astonishment",children:"Principle of Least Astonishment"}),"\n",(0,t.jsx)(n.p,{children:"The Principle of Least Astonishment, also known as the Principle of Least Surprise, is a fundamental guideline in user interface and software design. It stresses the importance of creating systems that behave in ways consistent with user expectations, minimizing surprise and confusion. This principle is crucial in the Booster Framework, ensuring that the framework's components and functionalities align with the conventions familiar to both enterprise and hobbyist developers, thereby enhancing their experience and usability. It is particularly relevant in a context where developers are transitioning from traditional enterprise technologies to modern TypeScript-based environments, as it aids in reducing the learning curve and preventing user astonishment."}),"\n",(0,t.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Favoring JSON or YAML for configuration over more complex formats, aligning with common industry practices."}),"\n",(0,t.jsx)(n.li,{children:"Integrating with popular version control systems like Git and widely-used platforms such as GitHub or GitLab."}),"\n",(0,t.jsx)(n.li,{children:"Recommending mainstream IDEs like Visual Studio Code, which are familiar to a broad range of developers."}),"\n",(0,t.jsx)(n.li,{children:"Ensuring that the framework's functionalities and syntax are intuitive and align with common programming practices."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"principle-of-developer-happiness",children:"Principle of Developer Happiness"}),"\n",(0,t.jsx)(n.p,{children:"The Principle of Developer Happiness is centered around creating an environment and culture that aligns with developers' professional and personal expectations, thereby enhancing satisfaction and retention. This principle is key in the Booster Framework, focusing on an engaging experience and a supportive culture where developers, regardless of their background, feel valued and connected to the project's mission. It also involves using efficient tools and technologies to streamline the development process and saving time, along with continuously assessing developer efficiency and satisfaction."}),"\n",(0,t.jsx)(n.h3,{id:"examples-1",children:"Examples"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Comprehensive Documentation"}),": Providing clear and user-friendly documentation with practical examples for both enterprise and hobbyist developers."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Active Community Engagement"}),": Encouraging participation and collaboration within the open-source community."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Transparent Decision-Making"}),": Keeping language development and framework enhancement decisions transparent."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Inclusive Onboarding"}),": Offering learning resources and support for developers of varying skill levels."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Acknowledgement of Contributions"}),": Recognizing and valuing contributions from the community, regardless of their scale."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Open Feedback Channels"}),": Maintaining open channels for feedback, suggestions, and issue reporting from users and contributors."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"principle-of-least-effort",children:"Principle of Least Effort"}),"\n",(0,t.jsx)(n.p,{children:"The Principle of Least Effort emphasizes the idea that entities will naturally gravitate towards the solution that requires the least amount of work or complexity. In the context of the Booster Framework, this principle is applied to create systems and interfaces that are straightforward, easy to comprehend, and simple to interact with. This reduces the cognitive and operational load on users, particularly those transitioning from different technology backgrounds. For developers, it encourages the creation of code and architectures that are clean, efficient, and easy to understand and modify. By adhering to this principle, the Booster Framework aims to offer user-friendly applications and sustainably maintainable codebases, promoting efficient interactions for all users."}),"\n",(0,t.jsx)(n.h3,{id:"examples-2",children:"Examples"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Intuitive Syntax and Features"}),": Designing the framework with a simple, intuitive syntax that reduces cognitive load, particularly for those new to TypeScript."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Streamlined Documentation"}),": Providing clear, concise documentation that helps users quickly understand and utilize the framework."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Robust Standard Libraries"}),": Including comprehensive standard libraries that simplify common development tasks."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Effective Error Handling"}),": Implementing user-friendly error messages and handling mechanisms for efficient problem-solving."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Strong Community Support"}),": Building a supportive community for knowledge sharing and collaboration, reducing the effort needed to overcome challenges."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Simplified Version Management"}),": Facilitating easy version management and updates for seamless adoption of new features and improvements."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"The design principles outlined for the Booster Framework serve as a guiding light for the project's development and implementation processes. The Principle of Least Astonishment ensures system behavior aligns with user expectations, enhancing usability. The Principle of Developer Happiness focuses on creating a fulfilling environment for developers, while the Principle of Least Effort promotes simplicity and efficiency. These principles collectively ensure that the Booster Framework remains attuned to the needs of its diverse user base, from enterprise developers to hobbyist programmers, ensuring a user-centric, efficient, and developer-friendly journey throughout its development."})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var t=i(7294);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);