"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1404],{2801:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var t=i(5893),s=i(1151);const r={title:"BEEP 5 - Agent-Based Codebase Structure",authors:["NickSeagull"],date:"2024-01-25T00:04"},o=void 0,a={permalink:"/blog/0005-agent-codebase",editUrl:"https://github.com/boostercloud/booster/edit/main/website/proposals/0005-agent-codebase/index.mdx",source:"@site/proposals/0005-agent-codebase/index.mdx",title:"BEEP 5 - Agent-Based Codebase Structure",description:"Introduction",date:"2024-01-25T00:04:00.000Z",formattedDate:"January 25, 2024",tags:[],readingTime:3.65,hasTruncateMarker:!1,authors:[{name:"Nick Tchayka",title:"Booster Core Team",url:"https://github.com/NickSeagull",imageURL:"https://github.com/NickSeagull.png",key:"NickSeagull"}],frontMatter:{title:"BEEP 5 - Agent-Based Codebase Structure",authors:["NickSeagull"],date:"2024-01-25T00:04"},unlisted:!1,prevItem:{title:"BEEP 4 - Semantic Versioning",permalink:"/blog/0004-semantic-versioning"},nextItem:{title:"BEEP 6 - Remote Imports",permalink:"/blog/0006-remote-imports"}},l={authorsImageUrls:[void 0]},c=[{value:"Introduction",id:"introduction",level:2},{value:"Current Challenges",id:"current-challenges",level:2},{value:"Proposed Folder Structure",id:"proposed-folder-structure",level:2},{value:"Structure Overview",id:"structure-overview",level:3},{value:"Guidelines for Naming Subfolders",id:"guidelines-for-naming-subfolders",level:3},{value:"Benefits of the Reorganization",id:"benefits-of-the-reorganization",level:2},{value:"Addressing Potential Challenges",id:"addressing-potential-challenges",level:2},{value:"Interaction and Communication Between Agents",id:"interaction-and-communication-between-agents",level:3},{value:"Technical and Implementation Considerations",id:"technical-and-implementation-considerations",level:3},{value:"Additional Ideas",id:"additional-ideas",level:2},{value:"Integration of AI Agents",id:"integration-of-ai-agents",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.admonition,{title:"STATUS - DRAFT",type:"tip"}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(n.p,{children:["This document proposes a significant reorganization of the Booster Framework's folder structure to address current challenges in codebase management and to align with the principles of modularity and scalability. The current structure, ",(0,t.jsx)(n.code,{children:"src/{commands,events,entities,read-models}/*.ts"}),", while functional, has shown limitations in managing complexity as the framework and the team grow."]}),"\n",(0,t.jsxs)(n.p,{children:['This proposal introduces a new structure based on the concept of "Agents" in event sourcing/event-driven systems, aiming to bring conceptual clarity and improved organization to the codebase. It can be thought as ',(0,t.jsx)(n.strong,{children:"the microservices approach, but more tailored to the event-driven"})," nature of Booster Framework."]}),"\n",(0,t.jsx)(n.h2,{id:"current-challenges",children:"Current Challenges"}),"\n",(0,t.jsx)(n.p,{children:"The existing folder structure in the Booster Framework presents several challenges:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Lack of Modularity"}),": The mixed nature of components (commands, events, entities, read-models) in a flat structure leads to difficulties in isolating specific functionalities or use cases."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scalability Concerns"}),": As the team and the codebase grow, the lack of hierarchical organization makes it increasingly challenging to manage and navigate the codebase."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interdependency Issues"}),": The current structure does not clearly delineate dependencies and relationships between different components, leading to potential conflicts and complexities."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"proposed-folder-structure",children:"Proposed Folder Structure"}),"\n",(0,t.jsx)(n.p,{children:'The new folder structure is organized around the concept of "Agents", where each use case is encapsulated within its own subfolder. This approach mirrors the modular and event-driven nature of the Booster Framework.'}),"\n",(0,t.jsx)(n.h3,{id:"structure-overview",children:"Structure Overview"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"src/"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"agents/"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"agent-name-1/"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"commands/"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"events/"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"entities/"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"read-models/"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"agent-name-2/"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"commands/"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"events/"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"entities/"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"read-models/"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"..."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"shared/"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"common-entities/"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"utilities/"})}),"\n",(0,t.jsx)(n.li,{children:"..."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"guidelines-for-naming-subfolders",children:"Guidelines for Naming Subfolders"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reflective of Use Case"}),": Each subfolder (agent) should be named in a way that clearly reflects its specific use case or domain."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistent Naming Convention"}),": A uniform naming convention should be adopted across all agents to maintain consistency and readability."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"benefits-of-the-reorganization",children:"Benefits of the Reorganization"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Improved Modularity"}),": Each agent acts as a self-contained module, enhancing the clarity and separation of different aspects of the codebase."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enhanced Scalability"}),": This structure supports the growth of the team and the codebase, allowing for easier navigation and management."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Facilitated Collaboration"}),": Teams can focus on specific agents without interfering with others, simplifying collaboration and reducing the risk of conflicts."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Repository Splitting"}),": The modular nature of this structure allows for splitting the codebase into separate repositories if necessary for better scalability and management."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"addressing-potential-challenges",children:"Addressing Potential Challenges"}),"\n",(0,t.jsx)(n.h3,{id:"interaction-and-communication-between-agents",children:"Interaction and Communication Between Agents"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Well-Defined Interfaces"}),": Clear interfaces and communication protocols between agents must be established to ensure smooth interactions."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Shared Resources Management"}),": The ",(0,t.jsx)(n.code,{children:"shared/"})," folder will house common entities and utilities, accessible to all agents while maintaining their independence."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"technical-and-implementation-considerations",children:"Technical and Implementation Considerations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Incremental Transition"}),": A phased approach to migrating to the new structure is recommended to minimize disruption.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The team can start by putting everything in the ",(0,t.jsx)(n.code,{children:"shared/"})," folder, then gradually move to the new structure."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation and Communication"}),": The team should be in charge of having documentation and communication sessions in order to ensure that everyone is on the same page and responsibilities are not duplicated."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"additional-ideas",children:"Additional Ideas"}),"\n",(0,t.jsx)(n.h3,{id:"integration-of-ai-agents",children:"Integration of AI Agents"}),"\n",(0,t.jsxs)(n.p,{children:["In line with the event-driven architecture of the Booster Framework, an intriguing extension to the proposed semantic codebase structure is the ",(0,t.jsx)(n.strong,{children:"incorporation of AI agents"}),". These agents, mirroring the structure of traditionally-programmed agents with ",(0,t.jsx)(n.code,{children:"commands"}),", ",(0,t.jsx)(n.code,{children:"events"}),", ",(0,t.jsx)(n.code,{children:"read-models"}),", etc., would have their internal logic powered by ",(0,t.jsx)(n.strong,{children:"Large Language Models (LLMs)"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This integration aligns with the scalable and modular design of the framework, allowing AI agents to ",(0,t.jsx)(n.strong,{children:"autonomously handle specific tasks or workflows within their domain"}),". The use of AI agents could significantly enhance the framework's capabilities in areas such as:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Automated decision-making"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Predictive analytics"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Personalized user interactions"})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Each AI agent would operate within its designated subfolder, ensuring a ",(0,t.jsx)(n.strong,{children:"clear delineation and manageable interaction"})," with regular agents, while adhering to the same communication protocols and interface standards established in the overall framework."]}),"\n",(0,t.jsx)(n.p,{children:"This innovative approach opens new avenues for efficiency, creativity, and advanced functionalities within the Booster Framework ecosystem."}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:'The proposed semantic codebase structure for Booster Framework aims to address current challenges in codebase management while aligning with the principles of modularity and scalability. This reorganization, centered around the concept of "Agents", offers numerous benefits, including improved code separation, easier collaboration, and the potential for scalable codebase management.'})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var t=i(7294);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);