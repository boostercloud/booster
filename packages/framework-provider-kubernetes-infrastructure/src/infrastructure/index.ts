import { BoosterConfig, Logger } from '@boostercloud/framework-types'
import { K8sManagement } from './k8s-sdk/k8s-management'
import { HelmManager } from './helm-manager'
import { DeployManager } from './deploy-manager'
import { DaprManager } from './dapr-manager'
import { Promises } from '../helpers/promises'

export const deploy = (configuration: BoosterConfig, logger: Logger): Promise<void> =>
  deployBoosterApp(logger, configuration).catch(logger.error)

export const nuke = (configuration: BoosterConfig, logger: Logger): Promise<void> =>
  nukeBoosterApp(logger, configuration).catch(logger.error)

async function deployBoosterApp(logger: Logger, configuration: BoosterConfig): Promise<void> {
  const clusterManager = new K8sManagement()
  const helmManager = new HelmManager()
  const daprManager = new DaprManager(configuration, clusterManager, helmManager)
  const deployManager = new DeployManager(configuration, clusterManager, daprManager, helmManager)
  logger.info('Checking your cluster and installed tools')
  await Promises.allSettledAndFulfilled([deployManager.ensureNamespaceExists(), deployManager.ensureHelmIsReady()])
  logger.info('Checking your volume claim')
  await deployManager.ensureVolumeClaimExists()
  logger.info('Deploying all necessary services')
  await Promises.allSettledAndFulfilled([
    deployManager.ensureUploadServiceExists(),
    deployManager.ensureBoosterServiceExists(),
  ])
  logger.info('Checking your Dapr services and event store')
  await Promises.allSettledAndFulfilled([deployManager.ensureDaprExists(), deployManager.ensureEventStoreExists()])
  logger.info('Waiting for cluster to be ready to receive your code')
  await deployManager.ensureUploadPodExists()
  logger.info('Packing and uploading your code into the cluster')
  await deployManager.uploadUserCode()
  logger.info('Deploying your booster app ðŸš€')
  const serviceURL = await deployManager.deployBoosterApp()
  logger.info(`Your app is ready in this url: http://${serviceURL}`)
}

async function nukeBoosterApp(logger: Logger, configuration: BoosterConfig): Promise<void> {
  const clusterManager = new K8sManagement()
  const helmManager = new HelmManager()
  const daprManager = new DaprManager(configuration, clusterManager, helmManager)
  const deployManager = new DeployManager(configuration, clusterManager, daprManager, helmManager)
  logger.info('Nuking your Booster project ðŸ§¨')
  await deployManager.deleteDapr()
  logger.info('Nuking your event store if it was generated by Booster')
  await deployManager.deleteRedis()
  logger.info('Finishing to delete all resources')
  await deployManager.deleteAllResources()
  logger.info('Your app is terminated and destroyed ðŸ’¥')
}
